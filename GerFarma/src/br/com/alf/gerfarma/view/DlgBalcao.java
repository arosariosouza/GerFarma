/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.alf.gerfarma.view;

import br.com.alf.gerfarma.GerFarma;
import br.com.alf.gerfarma.control.GerFarmaController;
import br.com.alf.gerfarma.model.entity.ItemVenda;
import br.com.alf.gerfarma.model.entity.Medicamento;
import br.com.alf.gerfarma.model.entity.Medico;
import br.com.alf.gerfarma.model.entity.Pessoa;
import br.com.alf.gerfarma.model.entity.PreVenda;
import br.com.alf.gerfarma.util.JPAUtil;
import br.com.alf.gerfarma.util.Moeda;
import java.awt.AWTEvent;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author allan
 */
public class DlgBalcao extends javax.swing.JDialog {

    /**
     * Creates new form DlgBalcao
     *
     * @param parent
     * @param modal
     */
    public DlgBalcao(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        configuraFuncoesDeTeclado();
        preencheUsuarioAtual();
        preencherDataAtual();
        carregarListaDeClientes();
        carregarListaDeMedicos();
        carregarListaDeMedicamentos();
        listarItemsVenda();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                lblFuncionario = new javax.swing.JLabel();
                txtFuncionario = new javax.swing.JTextField();
                lblDataHora = new javax.swing.JLabel();
                lblDataHoraValor = new javax.swing.JLabel();
                lblCliente = new javax.swing.JLabel();
                cbxClientes = new javax.swing.JComboBox();
                pnlMedicamento = new javax.swing.JPanel();
                lblPesquisar = new javax.swing.JLabel();
                lblQtde = new javax.swing.JLabel();
                txtNumeroQtde = new javax.swing.JFormattedTextField();
                lblValorUnitario = new javax.swing.JLabel();
                lblValor = new javax.swing.JLabel();
                btnAdicinar = new javax.swing.JButton();
                btnRemover = new javax.swing.JButton();
                cbxMedicamentos = new javax.swing.JComboBox();
                jScrollPane1 = new javax.swing.JScrollPane();
                tblMedicamento = new javax.swing.JTable();
                lblLogo = new javax.swing.JLabel();
                pnlValorTotal = new javax.swing.JPanel();
                lblValorTotal = new javax.swing.JLabel();
                pnlCodigoBalcao = new javax.swing.JPanel();
                lblCodigoBalcao = new javax.swing.JLabel();
                btnNovo = new javax.swing.JButton();
                btnFinaliza = new javax.swing.JButton();
                lblControleMedico = new javax.swing.JLabel();
                btnAdicionarCliente = new javax.swing.JButton();
                lblCliente1 = new javax.swing.JLabel();
                cbxMedicos = new javax.swing.JComboBox();
                btnAdicionarMedico = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("GerFarma - Balcão");
                setIconImage(new ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/logo_32x29.png")).getImage());
                addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                formKeyTyped(evt);
                        }
                });

                lblFuncionario.setText("Funcionário:");

                txtFuncionario.setEditable(false);

                lblDataHora.setText("Data:");

                lblDataHoraValor.setText("23/09/2013 - 17:10");

                lblCliente.setText("Cliente:*");

                cbxClientes.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxClientesActionPerformed(evt);
                        }
                });

                pnlMedicamento.setBorder(javax.swing.BorderFactory.createTitledBorder("Medicamentos"));

                lblPesquisar.setText("Selecionar:");

                lblQtde.setText("Qtde:");

                txtNumeroQtde.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0"))));
                txtNumeroQtde.setText("0");

                lblValorUnitario.setText("Valor Unitário:");

                lblValor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                lblValor.setText("R$ 1,00");

                btnAdicinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/adicionar_16x16.png"))); // NOI18N
                btnAdicinar.setText("Incluir");
                btnAdicinar.setToolTipText("");
                btnAdicinar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAdicinarActionPerformed(evt);
                        }
                });

                btnRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/remover_16x16.png"))); // NOI18N
                btnRemover.setText("Excluir");
                btnRemover.setToolTipText("");
                btnRemover.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRemoverActionPerformed(evt);
                        }
                });

                cbxMedicamentos.addItemListener(new java.awt.event.ItemListener() {
                        public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                cbxMedicamentosItemStateChanged(evt);
                        }
                });
                cbxMedicamentos.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxMedicamentosActionPerformed(evt);
                        }
                });

                tblMedicamento.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                jScrollPane1.setViewportView(tblMedicamento);

                javax.swing.GroupLayout pnlMedicamentoLayout = new javax.swing.GroupLayout(pnlMedicamento);
                pnlMedicamento.setLayout(pnlMedicamentoLayout);
                pnlMedicamentoLayout.setHorizontalGroup(
                        pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMedicamentoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlMedicamentoLayout.createSequentialGroup()
                                                .addComponent(lblPesquisar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbxMedicamentos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblQtde)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtNumeroQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblValorUnitario)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblValor, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAdicinar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                );
                pnlMedicamentoLayout.setVerticalGroup(
                        pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMedicamentoLayout.createSequentialGroup()
                                .addGroup(pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblPesquisar)
                                        .addComponent(lblQtde)
                                        .addComponent(txtNumeroQtde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblValorUnitario)
                                        .addComponent(lblValor)
                                        .addComponent(btnAdicinar)
                                        .addComponent(cbxMedicamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlMedicamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnRemover)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                                .addContainerGap())
                );

                lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/balcao_48x48.png"))); // NOI18N

                pnlValorTotal.setBorder(javax.swing.BorderFactory.createTitledBorder("Valor Total"));

                lblValorTotal.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
                lblValorTotal.setForeground(new java.awt.Color(49, 106, 197));
                lblValorTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                lblValorTotal.setText("R$ 0,00");

                javax.swing.GroupLayout pnlValorTotalLayout = new javax.swing.GroupLayout(pnlValorTotal);
                pnlValorTotal.setLayout(pnlValorTotalLayout);
                pnlValorTotalLayout.setHorizontalGroup(
                        pnlValorTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlValorTotalLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblValorTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                );
                pnlValorTotalLayout.setVerticalGroup(
                        pnlValorTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlValorTotalLayout.createSequentialGroup()
                                .addComponent(lblValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pnlCodigoBalcao.setBorder(javax.swing.BorderFactory.createTitledBorder("Código Balcão"));

                lblCodigoBalcao.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
                lblCodigoBalcao.setForeground(new java.awt.Color(49, 106, 197));
                lblCodigoBalcao.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                lblCodigoBalcao.setText("0");

                javax.swing.GroupLayout pnlCodigoBalcaoLayout = new javax.swing.GroupLayout(pnlCodigoBalcao);
                pnlCodigoBalcao.setLayout(pnlCodigoBalcaoLayout);
                pnlCodigoBalcaoLayout.setHorizontalGroup(
                        pnlCodigoBalcaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCodigoBalcaoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblCodigoBalcao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                );
                pnlCodigoBalcaoLayout.setVerticalGroup(
                        pnlCodigoBalcaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCodigoBalcaoLayout.createSequentialGroup()
                                .addComponent(lblCodigoBalcao, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/novo_32x32.png"))); // NOI18N
                btnNovo.setText("F2 Novo");
                btnNovo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnNovoActionPerformed(evt);
                        }
                });

                btnFinaliza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/alf/gerfarma/view/img/aplicar_32x32.png"))); // NOI18N
                btnFinaliza.setText("F3 Finaliza");
                btnFinaliza.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnFinalizaActionPerformed(evt);
                        }
                });

                lblControleMedico.setForeground(new java.awt.Color(255, 0, 0));
                lblControleMedico.setText("* Campo obrigatório para venda de medicamento controlado");

                btnAdicionarCliente.setText("Adicionar...");
                btnAdicionarCliente.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAdicionarClienteActionPerformed(evt);
                        }
                });

                lblCliente1.setText("Médico:*");

                cbxMedicos.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxMedicosActionPerformed(evt);
                        }
                });

                btnAdicionarMedico.setText("Adicionar...");
                btnAdicionarMedico.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAdicionarMedicoActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lblFuncionario)
                                                                        .addComponent(lblCliente))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(txtFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(lblDataHora)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(lblDataHoraValor))
                                                                        .addComponent(cbxClientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnAdicionarCliente)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addComponent(pnlMedicamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(lblLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(pnlValorTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(pnlCodigoBalcao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnNovo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnFinaliza, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblControleMedico)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(lblCliente1)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(cbxMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnAdicionarMedico)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblFuncionario)
                                                        .addComponent(txtFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblDataHora)
                                                        .addComponent(lblDataHoraValor))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblCliente)
                                                        .addComponent(cbxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnAdicionarCliente)))
                                        .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblCliente1)
                                        .addComponent(cbxMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAdicionarMedico))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(pnlValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pnlCodigoBalcao, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(11, 11, 11)
                                                .addComponent(btnNovo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnFinaliza))
                                        .addComponent(pnlMedicamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblControleMedico)
                                .addGap(12, 12, 12))
                );

                pack();
                setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarClienteActionPerformed
        new PnlCliente().mostrar(this);
        carregarListaDeClientes();
    }//GEN-LAST:event_btnAdicionarClienteActionPerformed

        private void cbxClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClientesActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_cbxClientesActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

    }//GEN-LAST:event_formKeyTyped

    private void cbxMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMedicosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxMedicosActionPerformed

    private void btnAdicionarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarMedicoActionPerformed
        new PnlMedico().mostrar(this);
        carregarListaDeMedicos();
    }//GEN-LAST:event_btnAdicionarMedicoActionPerformed

    private void cbxMedicamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMedicamentosActionPerformed

    }//GEN-LAST:event_cbxMedicamentosActionPerformed

    private void cbxMedicamentosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMedicamentosItemStateChanged
        if (cbxMedicamentos.getSelectedIndex() != 0) {
            String nome = (String) cbxMedicamentos.getSelectedItem();
            //Busca medicamento por nome no banco de dados
            EntityManager em = JPAUtil.getInstance();
            typedQuery = em.createNamedQuery("Medicamento.findByNome", Medicamento.class)
                    .setParameter("nome", nome);

            medicamentoSelecionado = null;
            if (!typedQuery.getResultList().isEmpty()) {
                medicamentoSelecionado = (Medicamento) typedQuery.getSingleResult();
            }

            if (medicamentoSelecionado != null) {
                lblValor.setText(Moeda.mascaraDinheiro(medicamentoSelecionado.getPrecoVenda(), Moeda.DINHEIRO_REAL));
            } else {
                JOptionPane.showMessageDialog(this, "O medicamento " + nome + " não foi encontrado.");
                cbxMedicamentos.setSelectedIndex(0);
            }

        } else {
            lblValor.setText(Moeda.mascaraDinheiro(0, Moeda.DINHEIRO_REAL));
        }
    }//GEN-LAST:event_cbxMedicamentosItemStateChanged

    private void btnAdicinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicinarActionPerformed
        if (medicamentoSelecionado != null) {
            int quantidade = 0;
            try {
                quantidade = Integer.parseInt(txtNumeroQtde.getText());
                if (quantidade == 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Quantidade inválida.");
                txtNumeroQtde.requestFocus();
                txtNumeroQtde.selectAll();
                return;
            }

            if (quantidade > medicamentoSelecionado.getQuantidadeEstoque()) {
                JOptionPane.showMessageDialog(this, "Quantidade não disponível no estoque.");
            } else {

                // Procura medicamento na lista
                ItemVenda itemVendaEncontrado = null;
                for (ItemVenda itemVenda : itemsVenda) {
                    if (medicamentoSelecionado.getNome().equals(itemVenda.getMedicamento().getNome())) {
                        itemVendaEncontrado = itemVenda;
                    }
                }

                if (itemVendaEncontrado == null) {
                    ItemVenda itemVenda = new ItemVenda();
                    itemVenda.setQuantidade(quantidade);
                    itemVenda.setValorVendido(medicamentoSelecionado.getPrecoVenda());
                    itemVenda.setMedicamento(medicamentoSelecionado);
                    itemsVenda.add(itemVenda);
                    cbxMedicamentos.setSelectedIndex(0);
                    txtNumeroQtde.setText("0");
                } else {
                    if (itemVendaEncontrado.getQuantidade() + quantidade > medicamentoSelecionado.getQuantidadeEstoque()) {
                        JOptionPane.showMessageDialog(this, "Quantidade não disponível no estoque.");
                    } else {
                        itemVendaEncontrado.setQuantidade(itemVendaEncontrado.getQuantidade() + quantidade);
                        itemVendaEncontrado.setValorVendido(medicamentoSelecionado.getPrecoVenda());
                        cbxMedicamentos.setSelectedIndex(0);
                        txtNumeroQtde.setText("0");
                    }
                }
                listarItemsVenda();
                mostraValorTotal();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um medicamento.");
            cbxMedicamentos.requestFocus();
        }
    }//GEN-LAST:event_btnAdicinarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        if (tblMedicamento.getSelectedRow() > -1) {
            itemsVenda.remove(tblMedicamento.getSelectedRow());
            listarItemsVenda();
            mostraValorTotal();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um item de pre-venda.");
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        cbxClientes.setSelectedIndex(0);
        cbxMedicos.setSelectedIndex(0);
        cbxMedicamentos.setSelectedIndex(0);
        itemsVenda = new ArrayList<ItemVenda>();
        mostraValorTotal();
        listarItemsVenda();
        lblCodigoBalcao.setText("0");
        lblValorTotal.setText("R$ 0,00");
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnFinalizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizaActionPerformed
        //Verifica se foi adicionado algum item
        if (itemsVenda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não existem itens a serem registrados.");
            return;
        }

        //Verifica se foram selecionados medicamentos controlados
        boolean existeRemedioControlado = false;
        for (ItemVenda item : itemsVenda) {
            if (item.getMedicamento().getTipoMedicamento().trim().toUpperCase().equals ("CONTROLADO")) {
                existeRemedioControlado = true;
                break;
            }
        }

        if (existeRemedioControlado) {
            if (cbxClientes.getSelectedIndex() == 0 || cbxMedicos.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Foram adicionados medicamentos controlados. Por favor selecione o cliente e o médico responsavel.");
                return;
            }            
        }

        try {
            
            // -----------------------------------------------------------------
            entityManager = JPAUtil.getInstance();
            entityManager.getTransaction().begin();

            for (ItemVenda item : itemsVenda) {
                //Medicamento medicamento = item.getMedicamento();
                //medicamento.setQuantidadeEstoque(medicamento.getQuantidadeEstoque() - item.getQuantidade());
                //entityManager.merge(medicamento);
                entityManager.persist(item);
            }
            PreVenda preVenda = new PreVenda();
            preVenda.setDataHoraPrevenda(dataAtual);
            preVenda.setFuncionario(GerFarmaController.getFuncionarioCorrente());
            preVenda.setMedico(buscarMedico());
            preVenda.setCliente(buscarCliente());
            preVenda.setItemsVenda(itemsVenda);
            entityManager.persist(preVenda);
            
            entityManager.getTransaction().commit();

            // -----------------------------------------------------------------
            
            lblCodigoBalcao.setText(String.valueOf(preVenda.getIdPrevenda()));
            JOptionPane.showMessageDialog(this, "PreVenda finalizada com sucesso.\n Anote o código: "+preVenda.getIdPrevenda());
            btnNovo.doClick();
        } catch (Exception e) {
            //entityManager.getTransaction().rollback();
            JOptionPane.showMessageDialog(this, "Não foi possível Finalizar PreVenda.\n"+e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnFinalizaActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnAdicinar;
        private javax.swing.JButton btnAdicionarCliente;
        private javax.swing.JButton btnAdicionarMedico;
        private javax.swing.JButton btnFinaliza;
        private javax.swing.JButton btnNovo;
        private javax.swing.JButton btnRemover;
        private javax.swing.JComboBox cbxClientes;
        private javax.swing.JComboBox cbxMedicamentos;
        private javax.swing.JComboBox cbxMedicos;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel lblCliente;
        private javax.swing.JLabel lblCliente1;
        private javax.swing.JLabel lblCodigoBalcao;
        private javax.swing.JLabel lblControleMedico;
        private javax.swing.JLabel lblDataHora;
        private javax.swing.JLabel lblDataHoraValor;
        private javax.swing.JLabel lblFuncionario;
        private javax.swing.JLabel lblLogo;
        private javax.swing.JLabel lblPesquisar;
        private javax.swing.JLabel lblQtde;
        private javax.swing.JLabel lblValor;
        private javax.swing.JLabel lblValorTotal;
        private javax.swing.JLabel lblValorUnitario;
        private javax.swing.JPanel pnlCodigoBalcao;
        private javax.swing.JPanel pnlMedicamento;
        private javax.swing.JPanel pnlValorTotal;
        private javax.swing.JTable tblMedicamento;
        private javax.swing.JTextField txtFuncionario;
        private javax.swing.JFormattedTextField txtNumeroQtde;
        // End of variables declaration//GEN-END:variables

    private List<ItemVenda> itemsVenda = new ArrayList<ItemVenda>();

    private EntityManager entityManager;
    private Query query;
    private TypedQuery typedQuery;
    private Date dataAtual;
    private Medicamento medicamentoSelecionado;

    private void preencheUsuarioAtual() {
        txtFuncionario.setText(GerFarmaController.getFuncionarioCorrente().getUsuario());
    }

    private void carregarListaDeClientes() {
        //Buscando nome de clientes do banco
        entityManager = Persistence.createEntityManagerFactory("GERFARMAPU").createEntityManager();
        query = entityManager.createQuery("SELECT p.nome FROM Pessoa p ORDER BY p.nome");
        List<String> clientes = query.getResultList();

        //Adicionando nomes de clientes
        cbxClientes.removeAllItems();
        cbxClientes.addItem("::: Selecione um cliente :::");
        for (String cliente : clientes) {
            cbxClientes.addItem(cliente);
        }
    }

    private void carregarListaDeMedicos() {
        //Buscando nome de clientes do banco
        entityManager = Persistence.createEntityManagerFactory("GERFARMAPU").createEntityManager();
        query = entityManager.createQuery("SELECT m.nome FROM Medico m ORDER BY m.nome");
        List<String> medicos = query.getResultList();

        //Adicionando nomes de clientes
        cbxMedicos.removeAllItems();
        cbxMedicos.addItem("::: Selecione um Médico :::");
        for (String medico : medicos) {
            cbxMedicos.addItem(medico);
        }
    }

    private void carregarListaDeMedicamentos() {
        //Buscando nome de clientes do banco
        entityManager = Persistence.createEntityManagerFactory("GERFARMAPU").createEntityManager();
        query = entityManager.createQuery("SELECT m.nome FROM Medicamento m ORDER BY m.nome");
        List<String> medicamentos = query.getResultList();

        //Adicionando nomes de clientes
        cbxMedicamentos.removeAllItems();
        cbxMedicamentos.addItem("::: Selecione um Medicamento :::");
        for (String medicamento : medicamentos) {
            cbxMedicamentos.addItem(medicamento);
        }
    }

    private void preencherDataAtual() {
        dataAtual = new Date();
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(dataAtual);

        String dia = String.valueOf(calendario.get(Calendar.DAY_OF_MONTH));
        String mes = String.valueOf(calendario.get(Calendar.MONTH));
        String ano = String.valueOf(calendario.get(Calendar.YEAR));

        String hora = String.valueOf(calendario.get(Calendar.HOUR_OF_DAY));
        String minuto = String.valueOf(calendario.get(Calendar.MINUTE));

        String dataAtualStr = dia + "/" + mes + "/" + ano + " - " + hora + ":" + minuto;
        lblDataHoraValor.setText(dataAtualStr);
    }

    private void configuraFuncoesDeTeclado() {
        Toolkit.getDefaultToolkit().addAWTEventListener(
                new AWTEventListener() {
                    @Override
                    public void eventDispatched(final AWTEvent awt_evt) {
                        final KeyEvent evt = (KeyEvent) awt_evt;

                        switch (evt.getKeyCode()) {
                            case KeyEvent.VK_F2: {
                                btnNovo.doClick();
                                break;
                            }
                            case KeyEvent.VK_F3: {
                                btnFinaliza.doClick();
                                break;
                            }
                        }
                    }
                },
                AWTEvent.KEY_EVENT_MASK
        );
    }

    private void listarItemsVenda() {

        String[] columnNames = new String[]{"Produto", "Qtde.", "Valor Unitário", "Valor Total do Produto"};
        String[][] data = null;

        if (itemsVenda.size() > 0) {
            data = new String[itemsVenda.size()][4];

            int row = 0;
            for (ItemVenda itemVenda : itemsVenda) {
                data[row][0] = itemVenda.getMedicamento().getNome();
                data[row][1] = String.valueOf(itemVenda.getQuantidade());
                data[row][2] = String.valueOf(Moeda.mascaraDinheiro(itemVenda.getValorVendido(), Moeda.DINHEIRO_REAL));
                data[row][3] = String.valueOf(Moeda.mascaraDinheiro(itemVenda.getQuantidade() * itemVenda.getValorVendido(), Moeda.DINHEIRO_REAL));
                row++;
            };
        }
        tblMedicamento.setModel(new DefaultTableModel(data, columnNames));
    }

    private void mostraValorTotal() {
        double valorTotal = 0;
        for (ItemVenda itemVenda : itemsVenda) {
            valorTotal += itemVenda.getQuantidade() * itemVenda.getValorVendido();
        }
        lblValorTotal.setText(Moeda.mascaraDinheiro(valorTotal, Moeda.DINHEIRO_REAL));
    }

    private Medico buscarMedico() {
        String nome = (String) cbxMedicos.getSelectedItem();
        //Busca medicamento por nome no banco de dados
        EntityManager em = JPAUtil.getInstance();
        query = em.createQuery("SELECT m FROM Medico m WHERE m.nome = :nome", Medico.class)
                .setParameter("nome", nome);

        Medico medico = null;
        if (!query.getResultList().isEmpty()) {
            medico = (Medico) query.getSingleResult();
        }

        return medico;
    }

    private Pessoa buscarCliente() {
        String nome = (String) cbxClientes.getSelectedItem();
        //Busca medicamento por nome no banco de dados
        EntityManager em = JPAUtil.getInstance();
        query = em.createQuery("SELECT p FROM Pessoa p WHERE p.nome = :nome", Pessoa.class)
                .setParameter("nome", nome);

        Pessoa cliente = null;
        if (!query.getResultList().isEmpty()) {
            cliente = (Pessoa) query.getSingleResult();
        }

        return cliente;
    }
}
